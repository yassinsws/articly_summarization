name: Linting

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Frontend Linting
  frontend-lint:
    name: Frontend Linting
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npm run lint
    
    - name: Run ESLint with annotations
      uses: ataylorme/eslint-annotate-action@v2
      if: failure()
      with:
        repo-token: "${{ secrets.GITHUB_TOKEN }}"
        report-json: "frontend/eslint-report.json"
    
    - name: Check TypeScript
      run: npx tsc --noEmit
    
    - name: Check Prettier formatting
      run: npx prettier --check "src/**/*.{js,jsx,ts,tsx,json,css,md}"

  # Backend Linting
  backend-lint:
    name: Backend Linting
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./my-strapi-project
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: my-strapi-project/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint (if available)
      run: |
        if [ -f .eslintrc.js ] || [ -f .eslintrc.json ] || [ -f .eslintrc.yml ]; then
          npm run lint
        else
          echo "No ESLint configuration found, running basic linting..."
          npx eslint "src/**/*.{js,ts}" --ext .js,.ts || echo "ESLint completed with warnings"
        fi
    
    - name: Check TypeScript
      run: |
        if [ -f tsconfig.json ]; then
          npx tsc --noEmit
        else
          echo "No TypeScript configuration found, skipping TypeScript check"
        fi
    
    - name: Check for common issues
      run: |
        echo "Checking for common Node.js issues..."
        
        # Check for potential security issues
        npm audit --audit-level=high
        
        # Check for outdated packages
        npm outdated || true
        
        # Check package.json syntax
        node -e "JSON.parse(require('fs').readFileSync('package.json'))" && echo "package.json is valid JSON"

  # Docker Linting
  docker-lint:
    name: Docker Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Lint Frontend Dockerfile
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: frontend/Dockerfile
        failure-threshold: warning
    

    
    - name: Lint Backend Dockerfile
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: my-strapi-project/Dockerfile
        failure-threshold: warning
    
    - name: Lint docker-compose files
      run: |
        # Install docker-compose if not available
        if ! command -v docker-compose &> /dev/null; then
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
        fi
        
        # Validate docker-compose development file
        docker-compose -f docker-compose.yml config --quiet

  # YAML/JSON Linting
  config-lint:
    name: Configuration Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Lint YAML files
      uses: ibiqlik/action-yamllint@v3
      with:
        file_or_dir: |
          .github/workflows/
          docker-compose.yml
        config_file: .yamllint.yml
        strict: true
    
    - name: Validate JSON files
      run: |
        find . -name "*.json" -not -path "./node_modules/*" -not -path "./.git/*" | while read file; do
          echo "Validating $file"
          python -m json.tool "$file" > /dev/null
        done